/**
 * Validate reset token, if valid set the user password, to the provided newPassword
 * 
 */

var userModule = require("user");

var params = request.parameters && Object.keys(request.parameters).length > 0 ? request.parameters : request.body;
if (params &&  params.body) { // parameters format sent by a widget
    params = JSON.parse(params.body);
}

if (!params || (!params.id || params.id.trim() == '') || (!params.password || params.password.trim() == '') || (!params.resetCode || params.resetCode.trim() == '') ) {
    return { "status": "failure", "errorCode": "MISSING_PARAMETERS", "errorDetail": "The following parameters are required: username, resetCode, password" };
}

var id = params["id"];
var resetCode = params["resetCode"];
var password = params["password"];
try{
    var getUserResponse =  userModule.get(id);
    if(getUserResponse.metadata.status=="success"){
        var user = getUserResponse.result;
        var  tokenExpired = _hasTokenExpired(user);
        if (tokenExpired.status=="failure"){
             return{"status" : "failure", errorCode: "INVALID_USER", errorDetail: "An Error has occurred, please send a forgot password again"};
         }
        else if(tokenExpired.response== true){
            return {"status" : "failure", errorCode: "INVALID_TOKEN", errorDetail: "Your reset token has expired, please send a forgot password again"};
        }
        if (userTokenIsValid(user, resetCode)) {
            return updatePassword(user, password);
        } else {
            return {"status" : "failure", errorCode: "INVALID_ACCOUNT", errorDetail: "Login provided is invalid or your reset token has expired, please enter a valid email address or send a forgot password again"}
        }
        
    }else{
        return {
            "status" : "failure",
            "errorCode": "INTERNAL_ERROR",
            "errorDetail" : "An error has occurred. Please try again later."
        }
    }
}
catch(exception){
    return {
        "status" : "failure",
        "errorCode": "INTERNAL_ERROR",
        "errorDetail" : exception
    }
}




/**
 * True if passed resetToken is the same as the user saved resetToken
 * else False
 * @returns
 */
function userTokenIsValid(user, resetCode) {
	var savedToken = user.resetToken;
	//NEED TO DO: check expirationDate of Token
	if(savedToken != null && savedToken == resetCode)
		return true;
	else 
		return false;
}

function _hasTokenExpired(user) {
    var resetToken = user.resetTokenExpiration;
    var now = Math.floor(new Date().getTime()/1000).toString();
    return {
        "status" : "success",
        "response" : now > resetToken
    }
}


/**
 * Set users password
 *
 * @param login
 * @param password
 */
function updatePassword (user, newPassword) {
	var userRequestParams = {
			"id": user.id,
			"resetToken": "",
			"resetTokenExpiration": "",
		    "password": newPassword,
  		    "temperedPassword": ""
	}
	
	var isSuspended = user.isSuspended;
	if (isSuspended == 'true') {
	    return { "status" : "failure", "errorCode": "INVALID_IDENTIFIER", "errorDetail": "Invalid user"};
	}
	
    var saveUserResetTokenResult = userModule.update(userRequestParams);
	if (saveUserResetTokenResult.metadata.status == 'failure') {
	    var errorMessageDetails = saveUserResetTokenResult.metadata.errorCode + ((saveUserResetTokenResult.metadata.errorDetail != null) ? "" : ": " + saveUserResetTokenResult.metadata.errorDetail);
	    return { "status" : "failure", errorCode: saveUserResetTokenResult.metadata.errorCode, errorDetail: "Unable to reset user password for user " + user.id};
	} else {
		return {"status": "success"}	
	}

}