var md5Lib = require("login/entities/hex.library");
var config = require("login/entities/config");
var user = require("user")
var log = require("log"); 
log.setLevel("info");


var params = request.parameters && Object.keys(request.parameters).length > 0 ? request.parameters : request.body;
if (params &&  params.body) { // parameters format sent by a widget
    params = JSON.parse(params.body);
}

if (!params || !params.email || params.email.trim() == '') {
    throw {
        errorCode: "Missing_Parameter",
        errorDetail: "Mandatory parameters missing (email)"
    };
}

var email = params["email"].toLowerCase();
var users =  user.query({"query":'id ="'+email+'" OR email="'+email+'"', "fields":"*"});
if(users.metadata.status == "success" && users.result.users.length == 0) {
    return {
      "status" : "failure", 
       errorCode: "INVALID_ACCOUNT",
       errorDetail: "Email provided is invalid, please enter a valid email address"
    }
} else {
    var toResetUser = users.result.users[0];
    log.info("toResetUser: "+JSON.stringify(toResetUser));
    return resetPassword(toResetUser)
}



function resetPassword (toResetUser) {

	//Build token hash, based on user login, forgot password flag and current date
	var theDate = new Date();	
	var resetCode = generateKey({"forgotPassword": "true", "email": toResetUser.id, "time": theDate});
	
	// add one day to the current date
	var oneDay = 1 * 24 * 60 * 60 ;
	// setting the expiration to 1 days 
	var expirationDate = Math.floor((new Date().getTime()/1000)+oneDay).toString();

	var userRequestParams = {
			"id": toResetUser.id,
			"resetToken": resetCode,
			"resetTokenExpiration": expirationDate
	}
	
	var saveUserResetTokenResult = user.update(userRequestParams);
	if (saveUserResetTokenResult.metadata.status == 'failure') {
	    var errorMessageDetails = saveUserResetTokenResult.metadata.errorCode + ((saveUserResetTokenResult.metadata.errorDetail != null) ? "" : ": " + saveUserResetTokenResult.metadata.errorDetail);
	    return { "status" : "failure", errorCode: saveUserResetTokenResult.metadata.errorCode, errorDetail: "Unable to reset user password for user " + toResetUser.email || toResetUser.id + " because of [" + errorMessageDetails + "]" };
	} else {
		
		var lang = toResetUser.lang || "en";
        var mailBody = "Hello " + toResetUser.name || toResetUser.id;
        mailBody += ", <br>";
        mailBody += "<br> Your password has been reset. <br>";
		mailBody += "<br> Please click on the link below to set your new password. If the link does not work, copy and paste the link directly into the address bar of your internet browser. <br>";
        mailBody += "<br><a href='https://" + request.headers.host + "/login/view/login.html?resetCode=" + resetCode + "&lang=" + lang + "'>Click here to reset your password.</a>";
        var emailConfig = {
          "to": toResetUser.email,
          "fromName": config.mail.fromName,
          "subject": "Reset Password - Verification",
          "body": mailBody
        };
        sendMail(emailConfig.to, emailConfig.fromName, emailConfig.subject, emailConfig.body);
        return {"status": "success"};
	}
}


function generateKey (params) {
	var conc = "";
	var key;
	for (key in params) {
		conc += params [key];
	}
	
	var result = md5Lib.hex_md5(conc);
	return result;
}




