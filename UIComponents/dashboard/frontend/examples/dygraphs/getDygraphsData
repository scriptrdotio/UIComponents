var log = require("log");
log.setLevel("INFO");

var requestParams = request.body;

var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var requestParams = typeof(body) == "string" ? JSON.parse(body) : body;

var publishResponse = function(channel, data, request, id) {
   var message = {"result": data};
   if(request.body && request.body.id) {
     message["id"] = request.body.id;
   } else {
     if(!id) {
        id = "gauge"
     }
     //Add a default id to identify the message published over the socket
      message["id"] = id;
   }
   publish(channel, message);
}


var dygraphData  = [];

var t = new Date();
for (var i = 20; i >= 1; i--) {
    var x = new Date(t.getTime() - (i * 1000));
    dygraphData.push([x.getTime(),  i + Math.random(),
                  100 - (i + Math.floor((Math.random() * 100) + 1)),
                  10 * (1 + (i + Math.floor((Math.random() * 100) + 1)) * (100 - Math.floor((Math.random() * 100) + 1)) / (50 * 50)),
                  10 * (2 - (i + Math.floor((Math.random() * 100) + 1)) * (100 - Math.floor((Math.random() * 100) + 1)) / (50 * 50))]);
}


publishResponse("responseChannel", dygraphData, request, "dygraphs");

return dygraphData;